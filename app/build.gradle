/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    id 'groovy'
    id 'application'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.11.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.cyclonedx.bom' version '1.7.3'
    id 'org.sonarqube' version '3.5.0.2730'
}

cyclonedxBom {

    // Specified the type of project being built. Defaults to 'library'
    projectType = "application"

    // Boms destination directory (defaults to build/reports)

    // The file name for the generated BOMs (before the file format suffix). Defaults to 'bom'
    outputName = "bom"

    // The file format generated, can be xml, json or all for generating both
    outputFormat = "all"

    // Exclude BOM Serial Number
    includeBomSerialNumber = false

}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    implementation 'io.javalin:javalin:5.3.1'
    implementation 'org.reflections:reflections:0.10.2'
    implementation 'javax.inject:javax.inject:1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.slf4j:slf4j-api:2.0.6'
    implementation 'org.slf4j:slf4j-simple:2.0.6' // Can be replaced with logBack, log4j, log4j2, Java Utility Logger
    implementation 'com.fasterxml.jackson.core:jackson-core:2.14.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.1'

    testImplementation 'org.apache.groovy:groovy:4.0.7'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
    testImplementation 'com.openpojo:openpojo:0.9.1'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.12.3'
}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.90
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: test.jacoco.excludes)
        }))
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: test.jacoco.excludes)
        }))
    }
}

application {
    mainClass = 'gov.hhs.cdc.trustedintermediary.external.javalin.App'
}

tasks.named('test') {
    useJUnitPlatform()

    jacoco {
        excludes = [
            '**/javalin/App*',
            '**/jackson/JacksonFormatter*',
            '**/slf4j/Slf4jLogger*',
        ]
    }
}

spotless {
    java {
        googleJavaFormat().aosp()
    }

    groovy {
        greclipse().configFile('../greclipse.properties')
        excludeJava()
    }

    groovyGradle {
        greclipse().configFile('../greclipse.properties')
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "trusted-intermediary"
        property "sonar.organization", "cdcgov"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
