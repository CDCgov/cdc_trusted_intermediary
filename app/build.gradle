/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    id 'groovy'
    id 'application'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.11.0'
    id 'com.github.johnrengelman.shadow' version '8.0.0'
    id 'org.cyclonedx.bom' version '1.7.4'
    id 'org.sonarqube' version '4.0.0.2929'
}

cyclonedxBom {

    // Specified the type of project being built. Defaults to 'library'
    projectType = "application"

    // Boms destination directory (defaults to build/reports)

    // The file name for the generated BOMs (before the file format suffix). Defaults to 'bom'
    outputName = "bom"

    // The file format generated, can be xml, json or all for generating both
    outputFormat = "all"

    // Exclude BOM Serial Number
    includeBomSerialNumber = false

}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    implementation 'io.javalin:javalin:5.6.2'

    implementation 'org.reflections:reflections:0.10.2'

    implementation 'javax.inject:javax.inject:1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    //logging
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    //jackson
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.2'

    //fhir
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-base:6.6.2'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-structures-r4:6.6.2'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-caching-caffeine:6.6.2'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-validation-resources-r4:6.6.2'
    implementation 'org.fhir:ucum:1.0.7'

    // Apache Client
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
    implementation 'org.apache.httpcomponents.client5:httpclient5-fluent:5.2.1'

    // jjwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // azure sdk
    implementation 'com.azure:azure-security-keyvault-secrets:4.6.4'
    implementation 'com.azure:azure-identity:1.10.0'

    testImplementation 'org.apache.groovy:groovy:4.0.13'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
    testImplementation 'com.openpojo:openpojo:0.9.1'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.15.1'
}

jacoco {
    toolVersion = '0.8.10'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.90
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: test.jacoco.excludes)
        }))
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: test.jacoco.excludes)
        }))
    }
}

application {
    mainClass = 'gov.hhs.cdc.trustedintermediary.external.javalin.App'
}

tasks.named('test') {
    useJUnitPlatform()

    jacoco {
        excludes = [
            '**/javalin/App*',
            '**/jackson/Jackson*',
            '**/slf4j/LocalLogger*',
            '**/slf4j/DeployedLogger*',
            '**/slf4j/LoggerHelper*',
            '**/hapi/HapiFhirImplementation*',
            '**/jjwt/JjwtEngine*',
            '**/apache/ApacheClient*',
            '**/azure/AzureSecrets*'
        ]
    }
}

spotless {
    java {
        googleJavaFormat().aosp()
    }

    groovy {
        greclipse().configFile('../greclipse.properties')
        excludeJava()
    }

    groovyGradle {
        greclipse().configFile('../greclipse.properties')
    }
}

sonar {
    properties {
        property "sonar.projectName", "Trusted Intermediary"
        property "sonar.projectKey", "trusted-intermediary"
        property "sonar.organization", "cdcgov"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.exclusions", test.jacoco.excludes
    }
}
